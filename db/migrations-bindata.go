// Code generated by go-bindata.
// sources:
// db/migrations/0001-initial.sql
// DO NOT EDIT!

package db

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbMigrations0001InitialSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\x51\x4f\xfa\x30\x14\xc5\xdf\xfb\x29\xee\xe3\x96\xff\x1f\x83\x24\x24\x26\x84\x87\xc2\x8a\x36\x6e\x05\xbb\x36\x91\xa7\x75\xd0\x8a\x4d\x5c\x21\xa3\x43\xf9\xf6\x76\x4c\x82\x1a\xe3\x83\x6f\xcd\x3d\xf7\x77\x7b\x72\x4e\xaf\x07\xff\x2a\xbb\xa9\x4b\x6f\x40\xee\xd0\x94\x13\x2c\x08\x08\x3c\x49\x09\xd0\x19\xb0\xb9\x00\xf2\x48\x73\x91\x83\xaa\x8e\x7b\x53\x1f\xec\xda\xa8\x2b\xe5\x4d\xb5\x7b\x09\x8c\x8a\x10\x80\xb2\x5a\xc1\xca\x6e\xac\xf3\xd1\xa0\x1f\x43\xe3\xf6\x76\xe3\x8c\x3e\xd1\x4c\xa6\x29\x60\x29\xe6\x05\x65\xe1\x7a\x46\x98\xf8\xdf\x32\x4d\xd3\x52\x87\xb2\x5e\x3f\x97\x75\x74\xdd\x0f\xdc\x79\xfd\xa4\xbb\xb2\x32\x17\x7d\x30\x1c\x7e\xd3\x57\x5b\x7d\x54\xe0\xcd\x9b\xff\x32\x6f\xa5\x75\x6d\x82\x35\x5d\xac\x8e\xbf\x1d\x38\x6f\x95\x5e\x81\x0e\x2f\x6f\x2b\x73\x71\x9c\x90\x19\x96\xa9\x80\xa9\xe4\x3c\x58\x2e\x04\xcd\x48\x2e\x70\xb6\x88\xe2\xce\xfe\x4e\xff\x95\x0e\xf8\x82\xd3\x0c\xf3\x25\xdc\x93\x65\xd4\xa6\x77\xba\x29\x19\x7d\x90\xa4\x9d\x75\xe9\x14\xdd\x40\x41\xd4\x85\x15\xa3\x18\x08\xbb\xa5\x8c\x8c\xa9\x73\xdb\x64\x72\xf9\xe6\x0e\xf3\x9c\x88\x71\xe3\x9f\x6e\x46\x08\x7d\xee\x34\xd9\xbe\x3a\x94\xf0\xf9\xe2\xa3\xd3\x9f\x5b\x1c\xa1\xf7\x00\x00\x00\xff\xff\x24\x40\x1a\x87\x08\x02\x00\x00")

func dbMigrations0001InitialSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbMigrations0001InitialSql,
		"db/migrations/0001-initial.sql",
	)
}

func dbMigrations0001InitialSql() (*asset, error) {
	bytes, err := dbMigrations0001InitialSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/migrations/0001-initial.sql", size: 520, mode: os.FileMode(420), modTime: time.Unix(1464780875, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/migrations/0001-initial.sql": dbMigrations0001InitialSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"0001-initial.sql": &bintree{dbMigrations0001InitialSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

